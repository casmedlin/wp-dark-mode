/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/frontend.js":
/*!*******************************!*\
  !*** ./assets/js/frontend.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
  var app = {
    init: function init() {
      //return if wpDarkModeFrontend is undefined or the page is excluded
      if (wpDarkModeFrontend.is_excluded) {
        return;
      } //return if elementor editor


      if (typeof elementor !== 'undefined') {
        return;
      } //handle includes


      if ('' !== wpDarkModeFrontend.includes) {
        app.handleIncludes();
      } //handle excludes


      app.handleExcludes(); //on the initialize darkmode

      app.initDarkmode(); //check OS mode
      //if (sessionStorage.getItem('wp_dark_mode_frontend') != 0) {

      if (localStorage.getItem('wp_dark_mode_active') != 0) {
        app.checkOsMode();
      } //handle switch click


      var darkmodeSwitch = document.querySelector('.wp-dark-mode-switch');

      if (darkmodeSwitch) {
        darkmodeSwitch.addEventListener('click', app.handleToggle);
      }

      window.addEventListener('wp_dark_mode', function (e) {
        var active = e.detail.active;

        if (active) {
          if (!app.isEnabled()) {
            app.enable();
          }

          document.querySelectorAll('.wp-dark-mode-switcher').forEach(function (switcher) {
            return switcher.classList.add('active');
          });
        } else {
          app.disable();
          document.querySelectorAll('.wp-dark-mode-switcher').forEach(function (switcher) {
            return switcher.classList.remove('active');
          });
        }
      }, false);
    },
    initDarkmode: function initDarkmode() {
      //const is_saved = sessionStorage.getItem('wp_dark_mode_frontend');
      var is_saved = localStorage.getItem('wp_dark_mode_active');

      if (is_saved && is_saved != 0 || !is_saved && wpDarkModeFrontend.default_mode) {
        document.querySelector('html').classList.add('wp-dark-mode-active');
        app.enable();
        document.querySelectorAll('.wp-dark-mode-switcher').forEach(function (switcher) {
          return switcher.classList.add('active');
        });
      }
    },
    handleToggle: function handleToggle() {
      var html = document.querySelector('html');
      html.classList.toggle('wp-dark-mode-active');
      var is_saved = html.classList.contains('wp-dark-mode-active') ? 1 : 0;
      sessionStorage.setItem('wp_dark_mode_frontend', is_saved);
      localStorage.setItem('wp_dark_mode_active', is_saved);
      window.dispatchEvent(new CustomEvent('wp_dark_mode', {
        detail: {
          active: is_saved
        }
      }));
    },

    /**
     * enable the darkmode
     */
    enable: function enable() {
      var _wpDarkModeFrontend = wpDarkModeFrontend,
          _wpDarkModeFrontend$c = _wpDarkModeFrontend.config,
          brightness = _wpDarkModeFrontend$c.brightness,
          contrast = _wpDarkModeFrontend$c.contrast,
          sepia = _wpDarkModeFrontend$c.sepia;
      DarkReader.enable({
        brightness: brightness,
        contrast: contrast,
        sepia: sepia
      });
    },
    disable: function disable() {
      return DarkReader.disable();
    },
    isEnabled: function isEnabled() {
      return DarkReader.enabled;
    },
    checkOsMode: function checkOsMode() {
      var darkMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

      try {
        // Chrome & Firefox
        darkMediaQuery.addEventListener('change', function (e) {
          var newColorScheme = e.matches ? 'dark' : 'light';
          window.dispatchEvent(new CustomEvent('wp_dark_mode', {
            detail: {
              active: 'dark' === newColorScheme
            }
          }));
        });
      } catch (e1) {
        try {
          // Safari
          darkMediaQuery.addListener(function (e) {
            var newColorScheme = e.matches ? 'dark' : 'light';
            window.dispatchEvent(new CustomEvent('wp_dark_mode', {
              detail: {
                active: 'dark' === newColorScheme
              }
            }));
          });
        } catch (e2) {
          console.error(e2);
        }
      }
    },
    handleExcludes: function handleExcludes() {
      if ('' === wpDarkModeFrontend.excludes) {
        return;
      }

      var elements = document.querySelectorAll(wpDarkModeFrontend.excludes);
      elements.forEach(function (element) {
        element.classList.add('wp-dark-mode-ignore');
        var children = element.querySelectorAll('*');
        children.forEach(function (child) {
          child.classList.add('wp-dark-mode-ignore');
        });
      });
    },
    handleIncludes: function handleIncludes() {
      var elements = document.querySelectorAll(wpDarkModeFrontend.includes);
      elements.forEach(function (element) {
        element.classList.add('wp-dark-mode-include');
        var children = element.querySelectorAll('*');
        children.forEach(function (child) {
          child.classList.add('wp-dark-mode-include');
        });
      });
    }
  };
  document.addEventListener('DOMContentLoaded', app.init);
})(); //check if main element


window.wp_dark_mode_is_main_element = function (tagName) {
  var elements = ['MARK', 'CODE', 'PRE', 'INS', 'OPTION', 'INPUT', 'SELECT', 'TEXTAREA', 'BUTTON', 'A', 'VIDEO', 'CANVAS', 'PROGRESS', 'IFRAME', 'SVG', 'PATH'];
  return !elements.includes(tagName);
};

/***/ }),

/***/ 1:
/*!*************************************!*\
  !*** multi ./assets/js/frontend.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\xampp\htdocs\wp-dark-mode\wp-content\plugins\wp-dark-mode\assets\js\frontend.js */"./assets/js/frontend.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,